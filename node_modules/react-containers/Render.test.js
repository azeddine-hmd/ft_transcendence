"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
var React = require("react");
var Render_1 = require("./Render");
describe("<Render/>", function () {
    var MyComp = function () { return (React.createElement("div", null, "Hello")); };
    var provider = function () { return React.createElement(MyComp, null, "test"); };
    var returnFalse = function () { return false; };
    var returnTrue = function () { return true; };
    it("\n    does not call children function\n    when expr is falsy\n  ", function () {
        var fn = jest.fn(provider);
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: false }, fn));
        // provider is not called thus no MyComp
        expect(underTest.find(MyComp).length).toBe(0);
        expect(fn).not.toHaveBeenCalled();
    });
    it("\n    calls children function\n    when expr is truthy\n  ", function () {
        var fn = jest.fn(provider);
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: true }, fn));
        // provider is called here
        expect(underTest.find(MyComp).length).toBe(1);
        expect(fn).toHaveBeenCalled();
    });
    it("\n    does not call children function\n    when expr is a function and\n    it returns false\n  ", function () {
        var falsyFn = jest.fn(returnFalse);
        var fn = jest.fn(provider);
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: falsyFn }, fn));
        expect(underTest.find(MyComp).length).toBe(0);
        expect(falsyFn).toHaveBeenCalledTimes(1);
        expect(fn).not.toHaveBeenCalled();
    });
    it("\n    call children function\n    when expr is a function and\n    it returns true\n  ", function () {
        var truthyFn = jest.fn(returnTrue);
        var fn = jest.fn(provider);
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: truthyFn }, fn));
        expect(underTest.find(MyComp).length).toBe(1);
        expect(truthyFn).toHaveBeenCalledTimes(1);
        expect(fn).toHaveBeenCalledTimes(1);
    });
    it("\n    does not render child element\n    if expr is falsy\n  ", function () {
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: false },
            React.createElement(MyComp, null)));
        expect(underTest.find(MyComp).length).toBe(0);
    });
    it("\n    renders child element\n    if expr is truthy\n  ", function () {
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: true },
            React.createElement(MyComp, null)));
        expect(underTest.find(MyComp).length).toBe(1);
    });
    it("\n    returns null if child function returns undefined\n  ", function () {
        // we just make sure this renders properly and will not throw error
        // if fn returns undefined, react cant render
        var fn = jest.fn(function () { return undefined; });
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { ifTrue: true }, fn));
        expect(underTest.childAt(0)).toHaveLength(0);
    });
    it("passes data to child props if given", function () {
        var data = "ABC";
        var childFn = jest.fn(function (d) { return (React.createElement("div", null, data)); });
        var underTest = enzyme_1.mount(React.createElement(Render_1.Render, { data: data, ifTrue: true }, childFn));
        expect(childFn).toHaveBeenCalledWith(data);
    });
});
//# sourceMappingURL=Render.test.js.map