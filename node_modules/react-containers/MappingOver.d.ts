import * as React from 'react';
interface IComponentMapperProp<E = {}, D = {}> {
    element: E;
    data?: D;
    index: number;
    collection: E[];
}
declare type MapPropType<E = {}, D = {}> = React.SFC<IComponentMapperProp<E, D>>;
declare type MapAsArrayType<E = {}, D = {}, CP = {}> = (element: E, index: number, collection: E[], data?: D) => React.ReactElement<CP>;
declare type ChildrenType<E = {}, D = {}> = MapPropType<E, D> | MapAsArrayType<E>;
export interface IMappingOverProp<E = {}, D = {}, CP = {}> {
    collection: E[];
    mapArgAsProp?: true;
    children: ChildrenType;
    data?: D;
}
export declare class MappingOver<E = {}> extends React.PureComponent<IMappingOverProp<E>> {
    dispatchMap: (element: E, index: number, collection: E[]) => React.ReactElement<any>;
    render(): JSX.Element;
}
export {};
