"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
require("jest-styled-components");
var React = require("react");
var findChild_1 = require("./findChild");
describe('findChild', function () {
    var ToFind = function () {
        return React.createElement("div", null, "Ola");
    };
    it('finds react element under a given react element', function () {
        var renderedTree = enzyme_1.mount(React.createElement("div", null,
            React.createElement(ToFind, { name: "toFind" }, "Ok")));
        var foundEl = findChild_1.findChild(ToFind, renderedTree.props());
        expect(foundEl).toBeDefined();
        expect(foundEl.props.name).toEqual("toFind");
        expect(foundEl.props.children).toBeDefined();
    });
    it('renders undefined if none is found', function () {
        var renderedTree = enzyme_1.mount(React.createElement("div", null,
            React.createElement("div", null, "Ok")));
        var foundEl = findChild_1.findChild(ToFind, renderedTree.props());
        expect(foundEl).toEqual(undefined);
    });
    it('returns true with child is shaped as hot loaded', function () {
        var El = function () { return (React.createElement("div", null)); };
        var standin = jest.fn(function () { return El; });
        var child = {
            type: {
                name: 'ProxyFacade',
                '__reactstandin__getCurrent': standin
            }
        };
        var typeFound = findChild_1.filterChildrenWithType(El)(child);
        expect(typeFound).toBe(true);
        expect(standin).toHaveBeenCalled();
    });
    it('returns an array of all matching elements', function () {
        var renderedTree = enzyme_1.mount(React.createElement("div", null,
            React.createElement(ToFind, { name: "toFind" }, "Ok"),
            React.createElement(ToFind, { name: "toFind2" }, "Ok")));
        var foundEl = findChild_1.findChildren(ToFind, renderedTree.props());
        expect(foundEl).toHaveLength(2);
        // just to be sure
        expect(foundEl[0].props.name).toEqual("toFind");
        expect(foundEl[1].props.name).toEqual("toFind2");
    });
});
//# sourceMappingURL=findChild.test.js.map