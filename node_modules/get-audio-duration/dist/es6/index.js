"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAudioDurationInSeconds = void 0;
const ffprobe = require("@ffprobe-installer/ffprobe");
const execa = require("execa");
const isStream = require("is-stream");
const getFFprobeWrappedExecution = (input, ffprobePath) => {
    const params = [
        '-v',
        'error',
        '-select_streams',
        'a:0',
        '-show_format',
        '-show_streams',
    ];
    const overridenPath = ffprobePath || ffprobe.path;
    if (typeof input === 'string') {
        return execa(overridenPath, [...params, input]);
    }
    if (isStream(input)) {
        return execa(overridenPath, [...params, '-i', 'pipe:0'], {
            reject: false,
            input,
        });
    }
    throw new Error('Given input was neither a string nor a Stream');
};
/**
 * Returns a promise that will be resolved with the duration of given audio in
 * seconds.
 *
 * @param input Stream or path to file to be used as
 * input for `ffprobe`.
 * @param [ffprobePath] Optional. Path to `ffprobe` binary. Do not provide any
 * value for this parameter unless you need to override the path to `ffprobe`.
 * Defaults to the path provided by `@ffprobe-installer/ffprobe`, which works in
 * most environments.
 *
 * @return Promise that will be resolved with given audio duration in
 * seconds.
 */
const getAudioDurationInSeconds = (input, ffprobePath) => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout } = yield getFFprobeWrappedExecution(input, ffprobePath);
    const matched = stdout.match(/duration="?(\d*\.\d*)"?/);
    if (matched && matched[1])
        return parseFloat(matched[1]);
    throw new Error('No duration found!');
});
exports.getAudioDurationInSeconds = getAudioDurationInSeconds;
exports.default = getAudioDurationInSeconds;
//# sourceMappingURL=index.js.map